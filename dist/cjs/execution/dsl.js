"use strict";
/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable max-classes-per-file */
// Autogenerated from typescript.template file
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluentCommand = exports.FluentFiltersOrRelationsCondition = exports.FluentFiltersCondition = exports.FluentFiltersOrRelations = exports.FluentFilters = exports.Exec = void 0;
class FluentBase {
    constructor(prev) {
        this.prev = prev;
        this._textStr = '';
        this._params = new Map();
    }
    static addParams(paramsList, params) {
        params.forEach((value, key) => {
            if (!paramsList.has(key)) {
                paramsList.set(key, []);
            }
            paramsList.set(key, [value, ...paramsList.get(key)]);
        });
        return paramsList;
    }
    commandStringBuilder(currentInstruction = '', paramsList = new Map()) {
        const newCurrentInstruction = `${this.textStr} ${currentInstruction}`;
        const newParamsList = FluentBase.addParams(paramsList, this._params);
        if (this instanceof FluentCommand) {
            const fluentCommand = this;
            const customElements = newParamsList.has('customElement') ? newParamsList.get('customElement') : [];
            return fluentCommand.exec(newCurrentInstruction.trim(), customElements);
        }
        if (!this.prev) {
            throw new Error('Prev element not defined');
        }
        return this.prev.commandStringBuilder(newCurrentInstruction, newParamsList);
    }
    get textStr() { return this._textStr; }
    get params() { return this._params; }
}
class Exec extends FluentBase {
    exec() {
        return this.commandStringBuilder();
    }
}
exports.Exec = Exec;
// Filters
class FluentFilters extends FluentBase {
    /**
     * Filters for a UI element 'wizard item active'.
     *
     * @return {FluentFiltersOrRelations}
     */
    wizardItemActive() {
        this._textStr = 'wizard item active';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'wizard item'.
     *
     * @return {FluentFiltersOrRelations}
     */
    wizardItem() {
        this._textStr = 'wizard item';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'wizard'.
     *
     * @return {FluentFiltersOrRelations}
     */
    wizard() {
        this._textStr = 'wizard';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'windows bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    windowsBar() {
        this._textStr = 'windows bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'window'.
     *
     * @return {FluentFiltersOrRelations}
     */
    window() {
        this._textStr = 'window';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'video'.
     *
     * @return {FluentFiltersOrRelations}
     */
    video() {
        this._textStr = 'video';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'url'.
     *
     * @return {FluentFiltersOrRelations}
     */
    url() {
        this._textStr = 'url';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'tooltip'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tooltip() {
        this._textStr = 'tooltip';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'textfield'.
     *
     * @return {FluentFiltersOrRelations}
     */
    textfield() {
        this._textStr = 'textfield';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'textarea'.
     *
     * @return {FluentFiltersOrRelations}
     */
    textarea() {
        this._textStr = 'textarea';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'table row'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tableRow() {
        this._textStr = 'table row';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'table header'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tableHeader() {
        this._textStr = 'table header';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'table column'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tableColumn() {
        this._textStr = 'table column';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'table'.
     *
     * @return {FluentFiltersOrRelations}
     */
    table() {
        this._textStr = 'table';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'tab selected'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tabSelected() {
        this._textStr = 'tab selected';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'tab bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tabBar() {
        this._textStr = 'tab bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'tab active'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tabActive() {
        this._textStr = 'tab active';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'tab'.
     *
     * @return {FluentFiltersOrRelations}
     */
    tab() {
        this._textStr = 'tab';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'switch enabled'.
     *
     * @return {FluentFiltersOrRelations}
     */
    switchEnabled() {
        this._textStr = 'switch enabled';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'switch disabled'.
     *
     * @return {FluentFiltersOrRelations}
     */
    switchDisabled() {
        this._textStr = 'switch disabled';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'status bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    statusBar() {
        this._textStr = 'status bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'slider indicator'.
     *
     * @return {FluentFiltersOrRelations}
     */
    sliderIndicator() {
        this._textStr = 'slider indicator';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'slider'.
     *
     * @return {FluentFiltersOrRelations}
     */
    slider() {
        this._textStr = 'slider';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'sidebar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    sidebar() {
        this._textStr = 'sidebar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'scroll bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    scrollBar() {
        this._textStr = 'scroll bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'rect'.
     *
     * @return {FluentFiltersOrRelations}
     */
    rect() {
        this._textStr = 'rect';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'recaptcha'.
     *
     * @return {FluentFiltersOrRelations}
     */
    recaptcha() {
        this._textStr = 'recaptcha';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'rate'.
     *
     * @return {FluentFiltersOrRelations}
     */
    rate() {
        this._textStr = 'rate';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'radio button unselected'.
     *
     * @return {FluentFiltersOrRelations}
     */
    radioButtonUnselected() {
        this._textStr = 'radio button unselected';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'radio button selected'.
     *
     * @return {FluentFiltersOrRelations}
     */
    radioButtonSelected() {
        this._textStr = 'radio button selected';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'progressbar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    progressbar() {
        this._textStr = 'progressbar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'progress bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    progressBar() {
        this._textStr = 'progress bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'popover'.
     *
     * @return {FluentFiltersOrRelations}
     */
    popover() {
        this._textStr = 'popover';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'pil'.
     *
     * @return {FluentFiltersOrRelations}
     */
    pil() {
        this._textStr = 'pil';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'password'.
     *
     * @return {FluentFiltersOrRelations}
     */
    password() {
        this._textStr = 'password';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'pager'.
     *
     * @return {FluentFiltersOrRelations}
     */
    pager() {
        this._textStr = 'pager';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'navigation bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    navigationBar() {
        this._textStr = 'navigation bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'mouse text'.
     *
     * @return {FluentFiltersOrRelations}
     */
    mouseText() {
        this._textStr = 'mouse text';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'mouse pointer'.
     *
     * @return {FluentFiltersOrRelations}
     */
    mousePointer() {
        this._textStr = 'mouse pointer';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'mouse cursor'.
     *
     * @return {FluentFiltersOrRelations}
     */
    mouseCursor() {
        this._textStr = 'mouse cursor';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'modal'.
     *
     * @return {FluentFiltersOrRelations}
     */
    modal() {
        this._textStr = 'modal';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'message box'.
     *
     * @return {FluentFiltersOrRelations}
     */
    messageBox() {
        this._textStr = 'message box';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'map'.
     *
     * @return {FluentFiltersOrRelations}
     */
    map() {
        this._textStr = 'map';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'logo'.
     *
     * @return {FluentFiltersOrRelations}
     */
    logo() {
        this._textStr = 'logo';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'link'.
     *
     * @return {FluentFiltersOrRelations}
     */
    link() {
        this._textStr = 'link';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'keyboard'.
     *
     * @return {FluentFiltersOrRelations}
     */
    keyboard() {
        this._textStr = 'keyboard';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'image'.
     *
     * @return {FluentFiltersOrRelations}
     */
    image() {
        this._textStr = 'image';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'header'.
     *
     * @return {FluentFiltersOrRelations}
     */
    header() {
        this._textStr = 'header';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'footer'.
     *
     * @return {FluentFiltersOrRelations}
     */
    footer() {
        this._textStr = 'footer';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'flag'.
     *
     * @return {FluentFiltersOrRelations}
     */
    flag() {
        this._textStr = 'flag';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'dropdown menu'.
     *
     * @return {FluentFiltersOrRelations}
     */
    dropdownMenu() {
        this._textStr = 'dropdown menu';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'divider'.
     *
     * @return {FluentFiltersOrRelations}
     */
    divider() {
        this._textStr = 'divider';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'circle'.
     *
     * @return {FluentFiltersOrRelations}
     */
    circle() {
        this._textStr = 'circle';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'checkbox unchecked'.
     *
     * @return {FluentFiltersOrRelations}
     */
    checkboxUnchecked() {
        this._textStr = 'checkbox unchecked';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'checkbox checked'.
     *
     * @return {FluentFiltersOrRelations}
     */
    checkboxChecked() {
        this._textStr = 'checkbox checked';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'chart pie'.
     *
     * @return {FluentFiltersOrRelations}
     */
    chartPie() {
        this._textStr = 'chart pie';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'chart'.
     *
     * @return {FluentFiltersOrRelations}
     */
    chart() {
        this._textStr = 'chart';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'card'.
     *
     * @return {FluentFiltersOrRelations}
     */
    card() {
        this._textStr = 'card';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'browser bar'.
     *
     * @return {FluentFiltersOrRelations}
     */
    browserBar() {
        this._textStr = 'browser bar';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'breadcrumb'.
     *
     * @return {FluentFiltersOrRelations}
     */
    breadcrumb() {
        this._textStr = 'breadcrumb';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'banner'.
     *
     * @return {FluentFiltersOrRelations}
     */
    banner() {
        this._textStr = 'banner';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'badge'.
     *
     * @return {FluentFiltersOrRelations}
     */
    badge() {
        this._textStr = 'badge';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'alert'.
     *
     * @return {FluentFiltersOrRelations}
     */
    alert() {
        this._textStr = 'alert';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'unknown'.
     *
     * @return {FluentFiltersOrRelations}
     */
    unknown() {
        this._textStr = 'unknown';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for an UI element 'button'.
     *
     * @return {FluentFiltersOrRelations}
     */
    button() {
        this._textStr = 'button';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for an UI element 'text'.
     *
     * @return {FluentFiltersOrRelations}
     */
    text() {
        this._textStr = 'text';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for an UI element 'dropdown'.
     *
     * @return {FluentFiltersOrRelations}
     */
    dropdown() {
        this._textStr = 'dropdown';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for an UI element 'icon'.
     *
     * @return {FluentFiltersOrRelations}
     */
    icon() {
        this._textStr = 'icon';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a custom UI element (see {@link CustomElementJson}).
     *
     * **Important**: This increases the runtime quite a bit. So
     *  only use it when absolutely necessary.
     *
     * @param {CustomElementJson} customElement - The custom element to filter for.
     *
     * @return {FluentFiltersOrRelations}
     */
    customElement(customElement) {
        this._textStr = 'custom element';
        this._params.set('customElement', customElement);
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for a UI element 'checkbox' checked or unchecked.
     *
     * @return {FluentFiltersOrRelations}
     */
    checkbox() {
        this._textStr = 'checkbox';
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for similar (doesn't need to be a 100% equal) text.
     *
     * **Examples:**
     * ```typescript
     * 'text' === withText('text') => true
     * 'test' === withText('text') => true
     * 'other' === withText('text') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelations}
     */
    withText(text) {
        this._textStr = `with text "${text}"`;
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for equal text.
     *
     * **Note:** This should be only used in cases where the similarity
     *  comparison of {@link FluentFilters.withText()} allows not for
     *  specific enough filtering (too many elements).
     *
     * **Examples:**
     * ```typescript
     * 'text' === withExactText('text') => true
     * 'test' === withExactText('text') => false
     * 'other' === withExactText('text') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelations}
     */
    withExactText(text) {
        this._textStr = `equals text "${text}"`;
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for text containing the text provided as an argument.
     *
     * **Examples:**
     * ```typescript
     * 'This is an text' === containsText('text') => true
     * 'This is an text' === containsText('other text') => false
     * 'This is an text' === containsText('other') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelations}
     */
    containsText(text) {
        this._textStr = `contain text "${text}"`;
        return new FluentFiltersOrRelations(this);
    }
    /**
     * Filters for elements having a specific color.
     *
     * @param {COLOR} color - A color to match
     *
     * @return {FluentFiltersOrRelations}
     */
    colored(color) {
        this._textStr = `with color ${color}`;
        return new FluentFiltersOrRelations(this);
    }
}
exports.FluentFilters = FluentFilters;
// Relations
class FluentFiltersOrRelations extends FluentFilters {
    /**
     * Filters for an element inside another element.
     *
     * **Examples:**
     * ```typescript
     * --------------------
     * |     outerEl      |
     * |  --------------  |
     * |  |  innerEl   |  |
     * |  --------------  |
     * |                  |
     * --------------------
     *
     * // Returns innerEl because innerEl is inside outerEl
     * ...innerEl().in().outerEl()
     * // Returns nothing because innerEl is not inside outerEl
     * ...outerEl().in().innerEl()
     * ```
     *
     * @return {FluentFilters}
     */
    in() {
        this._textStr = 'in';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element right of another element.
     *
     * **Examples:**
     * ```typescript
     * --------------  --------------
     * |  leftEl    |  |  rightEl   |
     * --------------  --------------
     *
     * // Returns rightEl because rightEl is right of leftEl
     * ...rightEl().rightOf().leftEl()
     * // Returns no element because leftEl is left of rightEl
     * ...leftEl().rightOf().rightEl()
     * ```
     *
     * @return {FluentFilters}
     */
    rightOf() {
        this._textStr = 'right of';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element left of another element.
     *
     * **Examples:**
     * ```typescript
     * --------------  --------------
     * |  leftEl    |  |  rightEl   |
     * --------------  --------------
     *
     * // Returns leftEl because leftEl is left of rightEl
     * ...leftEl().leftOf().rightEl()
     * // Returns no element because rightEl is left of leftEl
     * ...rightEl().leftOf().leftEl()
     * ```
     *
     * @return {FluentFilters}
     */
    leftOf() {
        this._textStr = 'left of';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element below another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |    text    |
     * --------------
     * --------------
     * |   button   |
     * --------------
     *
     * // Returns button because button is below text
     * ...button().below().text()
     * // Returns no element because text is above button
     * ...text().below().button()
     * ```
     *
     * @return {FluentFilters}
     */
    below() {
        this._textStr = 'below';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element above another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |    text    |
     * --------------
     * --------------
     * |   button   |
     * --------------
     *
     * // Returns text because text is above button
     * ...text().above().button()
     * // Returns no element because button is below text
     * ...button().above().text()
     * ```
     *
     * @return {FluentFilters}
     */
    above() {
        this._textStr = 'above';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element nearest to another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |  button 1  |
     * --------------
     * --------------
     * |   text     |
     * --------------
     *
     *
     *
     * --------------
     * |  button 2  |
     * --------------
     *
     * // Returns button 1 because button 1 is nearer to the text than button 2
     * ...button().nearestTo().text()
     * ```
     *
     * @return {FluentFilters}
     */
    nearestTo() {
        this._textStr = 'nearest to';
        return new FluentFilters(this);
    }
    /**
     * Filters for an element containing another element.
     *
     * **Example:**
     * ```typescript
     * --------------------
     * |     outerEl      |
     * |  --------------  |
     * |  |  innerEl   |  |
     * |  --------------  |
     * |                  |
     * --------------------
     *
     * // Returns outerEl because outerEl contains innerEl
     * ...outerEl().contains().innerEl()
     * //  Returns no element because innerEl contains no outerEl
     * ...innerEl().contains().outerEl()
     * ```
     *
     * @return {FluentFilters}
     */
    contains() {
        this._textStr = 'contains';
        return new FluentFilters(this);
    }
    exec() {
        return this.commandStringBuilder();
    }
}
exports.FluentFiltersOrRelations = FluentFiltersOrRelations;
// Filters
class FluentFiltersCondition extends FluentBase {
    /**
     * Filters for a UI element 'wizard item active'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    wizardItemActive() {
        this._textStr = 'wizard item active';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'wizard item'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    wizardItem() {
        this._textStr = 'wizard item';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'wizard'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    wizard() {
        this._textStr = 'wizard';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'windows bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    windowsBar() {
        this._textStr = 'windows bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'window'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    window() {
        this._textStr = 'window';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'video'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    video() {
        this._textStr = 'video';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'url'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    url() {
        this._textStr = 'url';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'tooltip'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tooltip() {
        this._textStr = 'tooltip';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'textfield'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    textfield() {
        this._textStr = 'textfield';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'textarea'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    textarea() {
        this._textStr = 'textarea';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'table row'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tableRow() {
        this._textStr = 'table row';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'table header'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tableHeader() {
        this._textStr = 'table header';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'table column'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tableColumn() {
        this._textStr = 'table column';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'table'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    table() {
        this._textStr = 'table';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'tab selected'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tabSelected() {
        this._textStr = 'tab selected';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'tab bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tabBar() {
        this._textStr = 'tab bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'tab active'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tabActive() {
        this._textStr = 'tab active';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'tab'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    tab() {
        this._textStr = 'tab';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'switch enabled'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    switchEnabled() {
        this._textStr = 'switch enabled';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'switch disabled'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    switchDisabled() {
        this._textStr = 'switch disabled';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'status bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    statusBar() {
        this._textStr = 'status bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'slider indicator'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    sliderIndicator() {
        this._textStr = 'slider indicator';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'slider'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    slider() {
        this._textStr = 'slider';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'sidebar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    sidebar() {
        this._textStr = 'sidebar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'scroll bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    scrollBar() {
        this._textStr = 'scroll bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'rect'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    rect() {
        this._textStr = 'rect';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'recaptcha'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    recaptcha() {
        this._textStr = 'recaptcha';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'rate'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    rate() {
        this._textStr = 'rate';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'radio button unselected'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    radioButtonUnselected() {
        this._textStr = 'radio button unselected';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'radio button selected'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    radioButtonSelected() {
        this._textStr = 'radio button selected';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'progressbar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    progressbar() {
        this._textStr = 'progressbar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'progress bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    progressBar() {
        this._textStr = 'progress bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'popover'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    popover() {
        this._textStr = 'popover';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'pil'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    pil() {
        this._textStr = 'pil';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'password'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    password() {
        this._textStr = 'password';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'pager'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    pager() {
        this._textStr = 'pager';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'navigation bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    navigationBar() {
        this._textStr = 'navigation bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'mouse text'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    mouseText() {
        this._textStr = 'mouse text';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'mouse pointer'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    mousePointer() {
        this._textStr = 'mouse pointer';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'mouse cursor'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    mouseCursor() {
        this._textStr = 'mouse cursor';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'modal'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    modal() {
        this._textStr = 'modal';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'message box'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    messageBox() {
        this._textStr = 'message box';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'map'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    map() {
        this._textStr = 'map';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'logo'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    logo() {
        this._textStr = 'logo';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'link'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    link() {
        this._textStr = 'link';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'keyboard'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    keyboard() {
        this._textStr = 'keyboard';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'image'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    image() {
        this._textStr = 'image';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'header'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    header() {
        this._textStr = 'header';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'footer'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    footer() {
        this._textStr = 'footer';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'flag'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    flag() {
        this._textStr = 'flag';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'dropdown menu'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    dropdownMenu() {
        this._textStr = 'dropdown menu';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'divider'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    divider() {
        this._textStr = 'divider';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'circle'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    circle() {
        this._textStr = 'circle';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'checkbox unchecked'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    checkboxUnchecked() {
        this._textStr = 'checkbox unchecked';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'checkbox checked'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    checkboxChecked() {
        this._textStr = 'checkbox checked';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'chart pie'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    chartPie() {
        this._textStr = 'chart pie';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'chart'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    chart() {
        this._textStr = 'chart';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'card'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    card() {
        this._textStr = 'card';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'browser bar'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    browserBar() {
        this._textStr = 'browser bar';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'breadcrumb'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    breadcrumb() {
        this._textStr = 'breadcrumb';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'banner'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    banner() {
        this._textStr = 'banner';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'badge'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    badge() {
        this._textStr = 'badge';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'alert'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    alert() {
        this._textStr = 'alert';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'unknown'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    unknown() {
        this._textStr = 'unknown';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for an UI element 'button'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    button() {
        this._textStr = 'button';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for an UI element 'text'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    text() {
        this._textStr = 'text';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for an UI element 'dropdown'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    dropdown() {
        this._textStr = 'dropdown';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for an UI element 'icon'.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    icon() {
        this._textStr = 'icon';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a custom UI element (see {@link CustomElementJson}).
     *
     * **Important**: This increases the runtime quite a bit. So
     *  only use it when absolutely necessary.
     *
     * @param {CustomElementJson} customElement - The custom element to filter for.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    customElement(customElement) {
        this._textStr = 'custom element';
        this._params.set('customElement', customElement);
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for a UI element 'checkbox' checked or unchecked.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    checkbox() {
        this._textStr = 'checkbox';
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for similar (doesn't need to be a 100% equal) text.
     *
     * **Examples:**
     * ```typescript
     * 'text' === withText('text') => true
     * 'test' === withText('text') => true
     * 'other' === withText('text') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    withText(text) {
        this._textStr = `with text "${text}"`;
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for equal text.
     *
     * **Note:** This should be only used in cases where the similarity
     *  comparison of {@link FluentFilters.withText()} allows not for
     *  specific enough filtering (too many elements).
     *
     * **Examples:**
     * ```typescript
     * 'text' === withExactText('text') => true
     * 'test' === withExactText('text') => false
     * 'other' === withExactText('text') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    withExactText(text) {
        this._textStr = `equals text "${text}"`;
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for text containing the text provided as an argument.
     *
     * **Examples:**
     * ```typescript
     * 'This is an text' === containsText('text') => true
     * 'This is an text' === containsText('other text') => false
     * 'This is an text' === containsText('other') => false
     * ```
     *
     * @param {string} text - A text to be matched.
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    containsText(text) {
        this._textStr = `contain text "${text}"`;
        return new FluentFiltersOrRelationsCondition(this);
    }
    /**
     * Filters for elements having a specific color.
     *
     * @param {COLOR} color - A color to match
     *
     * @return {FluentFiltersOrRelationsCondition}
     */
    colored(color) {
        this._textStr = `with color ${color}`;
        return new FluentFiltersOrRelationsCondition(this);
    }
}
exports.FluentFiltersCondition = FluentFiltersCondition;
// Relations
class FluentFiltersOrRelationsCondition extends FluentFiltersCondition {
    /**
     * Filters for an element inside another element.
     *
     * **Examples:**
     * ```typescript
     * --------------------
     * |     outerEl      |
     * |  --------------  |
     * |  |  innerEl   |  |
     * |  --------------  |
     * |                  |
     * --------------------
     *
     * // Returns innerEl because innerEl is inside outerEl
     * ...innerEl().in().outerEl()
     * // Returns nothing because innerEl is not inside outerEl
     * ...outerEl().in().innerEl()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    in() {
        this._textStr = 'in';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element right of another element.
     *
     * **Examples:**
     * ```typescript
     * --------------  --------------
     * |  leftEl    |  |  rightEl   |
     * --------------  --------------
     *
     * // Returns rightEl because rightEl is right of leftEl
     * ...rightEl().rightOf().leftEl()
     * // Returns no element because leftEl is left of rightEl
     * ...leftEl().rightOf().rightEl()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    rightOf() {
        this._textStr = 'right of';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element left of another element.
     *
     * **Examples:**
     * ```typescript
     * --------------  --------------
     * |  leftEl    |  |  rightEl   |
     * --------------  --------------
     *
     * // Returns leftEl because leftEl is left of rightEl
     * ...leftEl().leftOf().rightEl()
     * // Returns no element because rightEl is left of leftEl
     * ...rightEl().leftOf().leftEl()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    leftOf() {
        this._textStr = 'left of';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element below another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |    text    |
     * --------------
     * --------------
     * |   button   |
     * --------------
     *
     * // Returns button because button is below text
     * ...button().below().text()
     * // Returns no element because text is above button
     * ...text().below().button()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    below() {
        this._textStr = 'below';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element above another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |    text    |
     * --------------
     * --------------
     * |   button   |
     * --------------
     *
     * // Returns text because text is above button
     * ...text().above().button()
     * // Returns no element because button is below text
     * ...button().above().text()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    above() {
        this._textStr = 'above';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element nearest to another element.
     *
     * **Examples:**
     * ```typescript
     * --------------
     * |  button 1  |
     * --------------
     * --------------
     * |   text     |
     * --------------
     *
     *
     *
     * --------------
     * |  button 2  |
     * --------------
     *
     * // Returns button 1 because button 1 is nearer to the text than button 2
     * ...button().nearestTo().text()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    nearestTo() {
        this._textStr = 'nearest to';
        return new FluentFiltersCondition(this);
    }
    /**
     * Filters for an element containing another element.
     *
     * **Example:**
     * ```typescript
     * --------------------
     * |     outerEl      |
     * |  --------------  |
     * |  |  innerEl   |  |
     * |  --------------  |
     * |                  |
     * --------------------
     *
     * // Returns outerEl because outerEl contains innerEl
     * ...outerEl().contains().innerEl()
     * //  Returns no element because innerEl contains no outerEl
     * ...innerEl().contains().outerEl()
     * ```
     *
     * @return {FluentFiltersCondition}
     */
    contains() {
        this._textStr = 'contains';
        return new FluentFiltersCondition(this);
    }
    /**
     * Expects that filtered element exists.
     *
     * @return {ExecCondition}
     */
    exists() {
        this._textStr = 'exists';
        return new ExecCondition(this);
    }
    /**
     * Expects that filtered element does not exist.
     *
     * @return {ExecCondition}
     */
    notExists() {
        this._textStr = 'not exists';
        return new ExecCondition(this);
    }
}
exports.FluentFiltersOrRelationsCondition = FluentFiltersOrRelationsCondition;
class ExecCondition extends Exec {
}
// Commands
class FluentCommand extends FluentBase {
    constructor() {
        super(undefined);
    }
    /**
     * Expects a condition, e.g., `exists()` or `notExits()`,
     *  e.g., `...expect().text().withText('Login').exists()`.
     *
     * @return {FluentFiltersCondition}
     */
    expect() {
        this._textStr = 'Expect';
        return new FluentFiltersCondition(this);
    }
    /**
     * Clicks on the filtered element.
     *
     * @return {FluentFilters}
     */
    click() {
        this._textStr = 'Click on';
        return new FluentFilters(this);
    }
    /**
     * Move mouse over the filtered element.
     *
     * @return {FluentFilters}
     */
    moveMouseTo() {
        this._textStr = 'Move mouse to';
        return new FluentFilters(this);
    }
    /**
     * Types a text inside the filtered element.
     *
     * @param {string} text - A text to type
     *
     * @return {FluentFilters}
     */
    typeIn(text) {
        this._textStr = `Type "${text}" in`;
        return new FluentFilters(this);
    }
    /**
     * Moves mouse to the filtered element and scrolls in the x and y direction
     *
     * @param {number} x_offset - A (positive/negative) x direction.
     * @param {number} y_offset - A (positive/negative) y direction.
     *
     * @return {FluentFilters}
     */
    scrollInside(x_offset, y_offset) {
        this._textStr = `Scroll x ${x_offset} y ${y_offset} in`;
        return new FluentFilters(this);
    }
    /**
     * Moves the mouse relatively to an element in the direction.
     * This can be used when the mouse should not hover over on an element anymore.
     *
     * @param {number} x_offset - A (positive/negative) x direction.
     * @param {number} y_offset - A (positive/negative) y direction.
     *
     * @return {FluentFilters}
     */
    moveMouseRelativelyTo(x_offset, y_offset) {
        this._textStr = `Move mouse x ${x_offset} y ${y_offset} relatively to`;
        return new FluentFilters(this);
    }
    /**
     * Swipe an element in the x and y direction
     *
     * @param {number} x_offset - A x direction. positive an negative values are accepted
     * @param {number} y_offset - A y direction. positive an negative values are accepted
     *
     * @return {FluentFilters}
     */
    swipe(x_offset, y_offset) {
        this._textStr = `Swipe x ${x_offset} y ${y_offset}`;
        return new FluentFilters(this);
    }
    /**
     * Types a text at the current position.
     *
     * @param {string} text - A text to type
     *
     * @return {Exec}
     */
    type(text) {
        this._textStr = `Type "${text}"`;
        return new Exec(this);
    }
    /**
     * Moves the mouse from the current position (relative) in x and y direction.
     *
     * @param {number} x_offset - A (positive/negative) x direction.
     * @param {number} y_offset - A (positive/negative) y direction.
     *
     * @return {Exec}
     */
    moveMouseRelatively(x_offset, y_offset) {
        this._textStr = `Move mouse from current position with x ${x_offset} y ${y_offset}`;
        return new Exec(this);
    }
    /**
     * Moves the mouse to the absolute x and y coordinates.
     *
     * @param {number} x_coordinate - A (positive/negative) x coordinate.
     * @param {number} y_coordinate - A (positive/negative) y coordinate.
     *
     * @return {Exec}
     */
    moveMouse(x_coordinate, y_coordinate) {
        this._textStr = `Move mouse to  x ${x_coordinate} y ${y_coordinate}`;
        return new Exec(this);
    }
    /**
     * Scrolls based on the current mouse position in the x and y direction.
     *
     * **Important**: Mouse must be positioned in a scrollable area.
     *
     * @param {number} x_offset - A (positive/negative) x direction.
     * @param {number} y_offset - A (positive/negative) y direction.
     *
     * @return {Exec}
     */
    scroll(x_offset, y_offset) {
        this._textStr = `Scroll x ${x_offset} y ${y_offset}`;
        return new Exec(this);
    }
    /**
     * Executes a shell command.
     *
     * @param {string} shell_command - A shell command which is executed.
     *
     * @return {Exec}
     */
    execOnShell(shell_command) {
        this._textStr = `Execute shell command "${shell_command}"`;
        return new Exec(this);
    }
    /**
     * Clicks with left mouse key.
     *
     * @return {Exec}
     */
    mouseLeftClick() {
        this._textStr = 'Mouse left click';
        return new Exec(this);
    }
    /**
     * Clicks with right mouse key.
     *
     * @return {Exec}
     */
    mouseRightClick() {
        this._textStr = 'Mouse right click';
        return new Exec(this);
    }
    /**
     * Clicks with middle mouse key.
     *
     * @return {Exec}
     */
    mouseMiddleClick() {
        this._textStr = 'Mouse middle click';
        return new Exec(this);
    }
    /**
     * Double-clicks with left mouse key.
     *
     * @return {Exec}
     */
    mouseDoubleLeftClick() {
        this._textStr = 'Mouse double left click';
        return new Exec(this);
    }
    /**
     * Double-clicks with right mouse key.
     *
     * @return {Exec}
     */
    mouseDoubleRightClick() {
        this._textStr = 'Mouse double right click';
        return new Exec(this);
    }
    /**
     * Double-clicks with middle mouse key.
     *
     * @return {Exec}
     */
    mouseDoubleMiddleClick() {
        this._textStr = 'Mouse double middle click';
        return new Exec(this);
    }
    /**
     * Toggles mouse down.
     *
     * @return {Exec}
     */
    mouseToggleDown() {
        this._textStr = 'Mouse toggle down';
        return new Exec(this);
    }
    /**
     * Toggles mouse up.
     *
     * @return {Exec}
     */
    mouseToggleUp() {
        this._textStr = 'Mouse toggle up';
        return new Exec(this);
    }
    /**
     * Press three keys like `CTRL+ALT+DEL`
     *
     * @param {MODIFIER_KEY} first_key - A modifier key
     * @param {MODIFIER_KEY} second_key - A modifier key
     * @param {PC_KEY} third_key - A key
     *
     * @return {Exec}
     */
    pressThreeKeys(first_key, second_key, third_key) {
        this._textStr = `Press key ${first_key} ${second_key} ${third_key}`;
        return new Exec(this);
    }
    /**
     * Press two keys like `ALT+F4`
     *
     * @param {MODIFIER_KEY} first_key - A modifier key
     * @param {PC_KEY} second_key - A key
     *
     * @return {Exec}
     */
    pressTwoKeys(first_key, second_key) {
        this._textStr = `Press key ${first_key} ${second_key}`;
        return new Exec(this);
    }
    /**
     * Press one keys like `DEL`
     *
     * @param {PC_AND_MODIFIER_KEY} key - A key
     *
     * @return {Exec}
     */
    pressKey(key) {
        this._textStr = `Press key ${key}`;
        return new Exec(this);
    }
    /**
     * Press three Android keys like `CTRL+ALT+DEL`
     *
     * @param {ANDROID_KEY} first_key - A Android key
     * @param {ANDROID_KEY} second_key - A Android key
     * @param {ANDROID_KEY} third_key - A Android key
     *
     * @return {Exec}
     */
    pressAndroidThirdKey(first_key, second_key, third_key) {
        this._textStr = `Press android key ${first_key} ${second_key} ${third_key}`;
        return new Exec(this);
    }
    /**
     * Press two Android keys like `ALT+F4`
     *
     * @param {ANDROID_KEY} first_key - A Android key
     * @param {ANDROID_KEY} second_key - A Android key
     *
     * @return {Exec}
     */
    pressAndroidTwoKey(first_key, second_key) {
        this._textStr = `Press android key ${first_key} ${second_key}`;
        return new Exec(this);
    }
    /**
     * Press one Android keys like `DEL`
     *
     * @param {ANDROID_KEY} key - A Android key
     *
     * @return {Exec}
     */
    pressAndroidKey(key) {
        this._textStr = `Press android key ${key}`;
        return new Exec(this);
    }
}
exports.FluentCommand = FluentCommand;
